# Set up cmake
cmake_minimum_required(VERSION 3.2)
set(CMAKE_VERBOSE_MAKEFILE ON)
project(titan)

# Set up local directory
set(LOCAL_DIR ${PROJECT_SOURCE_DIR}/local)
if(NOT EXISTS ${LOCAL_DIR})
  file(MAKE_DIRECTORY ${LOCAL_DIR})
endif()

# Set up build directory
set(BUILD_DIR ${LOCAL_DIR}/build)
if(NOT EXISTS ${BUILD_DIR})
  file(MAKE_DIRECTORY ${BUILD_DIR})
endif()

# Set up cache directory
set(TOOLCHAIN_DIR ${LOCAL_DIR}/toolchain)
if(NOT EXISTS ${TOOLCHAIN_DIR})
  file(MAKE_DIRECTORY ${TOOLCHAIN_DIR})
endif()

# Remove temp directory if it exists
set(TEMP_DIR ${LOCAL_DIR}/temp)
if(EXISTS ${TEMP_DIR})
  file(REMOVE_RECURSE ${TEMP_DIR})
endif()

# Declare options
option(TITAN_TARGET "ID of compilation target" "STM32H745_F")
option(TITAN_PINOUT_PATH "Path to json pinout file" 
    ${PROJECT_SOURCE_DIR}/cfg/cmake/pinout_cfg/default_pinout.json)

# Verify pinout json file
if(NOT IS_READABLE ${TARGET_PINOUT_PATH})
  message(FATAL_ERROR "Invalid pinout path.")
endif()

# Get and verify pinout
file(READ ${TITAN_PINOUT_PATH} TARGET_PINOUT_JSON)
foreach(IDX RANGE 300)
  string(JSON CUR_PIN GET ${TARGET_PINOUT_JSON} ${IDX})
  if(CUR_PIN)
    add_compile_definitions(${CUR_PIN}=${IDX})
  endif()
endforeach()

# Get and verify target
file(READ ${PROJECT_SOURCE_DIR}/cfg/reference/target_info.json TARGET_INFO_JSON)
string(JSON TARGET_JSON_OBJ GET ${TARGET_INFO_JSON} ${TITAN_TARGET})
if(NOT TARGET_JSON_OBJ)
  message(FATAL_ERROR "Invalid target mcu.")
endif()

# Set config based on target
string(JSON TARGET_TOOLCHAIN GET ${TARGET_INFO_JSON} ${TITAN_TARGET} toolchain)
set(CMAKE_TOOLCHAIN_FILE ${PROJECT_SOURCE_DIR}/cfg/cmake/toolchain/${TARGET_TOOLCHAIN}.cmake)

string(JSON TARGET_PLATFORM GET ${TARGET_INFO_JSON} ${TITAN_TARGET} platform)
add_compile_definitions(${TARGET_PLATFORM})

string(JSON TARGET_ARCH GET ${TARGET_INFO_JSON} ${TITAN_TARGET} arch)
add_compile_definitions(${TARGET_ARCH})

string(JSON TARGET_LF_NAME GET ${TARGET_INFO_JSON} ${TITAN_TARGET} lf_name)
set(LINKER_FILE ${CMAKE_SOURCE_DIR}/bin/link/${TARGET_LF_NAME}.ld)

string(JSON TARGET_COMPL_OPTIONS GET ${TARGET_INFO_JSON} ${TITAN_TARGET} compile_options)
add_compile_options(${TARGET_COMPL_OPTIONS})

string(JSON TARGET_LINK_OPTIONS GET ${TARGET_INFO_JSON} ${TITAN_TARGET} linker_options)
add_link_options(${TARGET_LINK_OPTIONS})

# Set language config
enable_language(C ASM)
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS OFF)

# TEMP
########################################################################

# Declare executable
set(EXECUTABLE ${PROJECT_NAME}.elf)

# Set executable sources
add_executable(${EXECUTABLE} 
    test/devboard_startup.S 
    test/main.c)

# Set include directory
target_include_directories(test)

########################################################################

# Set post-build commands
add_custom_command(TARGET ${EXECUTABLE} POST_BUILD
    COMMAND ${CMAKE_SIZE} ${EXECUTABLE}
    COMMAND ${CMAKE_OBJCOPY} -O srec --srec-len=64 ${EXECUTABLE} ${PROJECT_NAME}.s19
    COMMAND ${CMAKE_OBJCOPY} -O ihex ${EXECUTABLE} ${PROJECT_NAME}.hex
    COMMAND ${CMAKE_OBJCOPY} -O binary ${EXECUTABLE} ${PROJECT_NAME}.bin)