set(TOOLCHAIN_VERSION "13.3.rel1")
set(TOOLCHAIN_PREFIX "arm-none-eabi")

if (WIN32)
    set(TOOLCHAIN_PATH_EXTENSION ".exe")
    set(TOOLCHAIN_ARCHIVE "arm_toolchain.zip")
    set(TOOLCHAIN_URL "https://developer.arm.com/-/media/Files/downloads/gnu/${TOOLCHAIN_VERSION}/binrel/arm-gnu-toolchain-${TOOLCHAIN_VERSION}-mingw-w64-i686-arm-none-eabi.zip")
elseif (APPLE)
    set(TOOLCHAIN_PATH_EXTENSION "")
    set(TOOLCHAIN_ARCHIVE "arm_toolchain.tar.xz")
    set(TOOLCHAIN_URL "https://developer.arm.com/-/media/Files/downloads/gnu/${TOOLCHAIN_VERSION}/binrel/arm-gnu-toolchain-${TOOLCHAIN_VERSION}-darwin-arm64-arm-none-eabi.tar.xz")
elseif (UNIX)
    set(TOOLCHAIN_PATH_EXTENSION "")
    set(TOOLCHAIN_ARCHIVE "arm_toolchain.tar.xz")
    set(TOOLCHAIN_URL "https://developer.arm.com/-/media/Files/downloads/gnu/${TOOLCHAIN_VERSION}/binrel/arm-gnu-toolchain-${TOOLCHAIN_VERSION}-x86_64-arm-none-eabi.tar.xz")
else()
    message(FATAL_ERROR "Unsupported platform")
endif()

set(TOOLCHAIN_CACHE_DIR "${CMAKE_BINARY_DIR}/toolchain_cache")
set(TOOLCHAIN_ARCHIVE_PATH "${TOOLCHAIN_CACHE_DIR}/${TOOLCHAIN_ARCHIVE}")
set(TOOLCHAIN_EXTRACT_DIR "${TOOLCHAIN_CACHE_DIR}/toolchain")

if (NOT EXISTS ${TOOLCHAIN_ARCHIVE_PATH})
    message(STATUS "Downloading ARM GCC toolchain to ${TOOLCHAIN_ARCHIVE_PATH}...")
    file(MAKE_DIRECTORY ${TOOLCHAIN_CACHE_DIR})
    file(DOWNLOAD ${TOOLCHAIN_URL} ${TOOLCHAIN_ARCHIVE_PATH} SHOW_PROGRESS)
else()
    message(STATUS "Using cached toolchain archive.")
endif()

if (NOT EXISTS ${TOOLCHAIN_EXTRACT_DIR})
    message(STATUS "Extracting ARM GCC toolchain to ${TOOLCHAIN_EXTRACT_DIR}...")
    file(ARCHIVE_EXTRACT INPUT ${TOOLCHAIN_ARCHIVE_PATH} DESTINATION ${TOOLCHAIN_EXTRACT_DIR})
else()
    message(STATUS "Toolchain already extracted.")
endif()

file(GLOB EXTRACTED_TOOLCHAIN_DIRS "${TOOLCHAIN_EXTRACT_DIR}/*")
list(GET EXTRACTED_TOOLCHAIN_DIRS 0 TOOLCHAIN_BIN_DIR) # TODO: Find better way of getting actual toolchain dir
file(RENAME ${EXTRACTED_TOOLCHAIN_DIRS} 0 "arm-gnu-toolchain") 
set(TOOLCHAIN_BIN_PATH "${TOOLCHAIN_BIN_DIR}/bin")

set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR ARM)
set(CMAKE_C_COMPILER ${TOOLCHAIN_BIN_PATH}/arm-none-eabi-gcc${TOOLCHAIN_PATH_EXTENSION})
set(CMAKE_CXX_COMPILER ${TOOLCHAIN_BIN_PATH}/arm-none-eabi-g++${TOOLCHAIN_PATH_EXTENSION})
set(CMAKE_ASM_COMPILER ${TOOLCHAIN_BIN_PATH}/arm-none-eabi-gcc${TOOLCHAIN_PATH_EXTENSION})
set(CMAKE_OBJCOPY ${TOOLCHAIN_BIN_PATH}/arm-none-eabi-objcopy${TOOLCHAIN_PATH_EXTENSION})
set(CMAKE_OBJDUMP ${TOOLCHAIN_BIN_PATH}/arm-none-eabi-objdump${TOOLCHAIN_PATH_EXTENSION})
set(CMAKE_SIZE ${TOOLCHAIN_BIN_PATH}/arm-none-eabi-size${TOOLCHAIN_PATH_EXTENSION})

set(CMAKE_EXE_LINKER_FLAGS_INIT "-nostdlib")
set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)

set(CMAKE_FIND_ROOT_PATH ${TOOLCHAIN_BIN_DIR})
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
